{"version":3,"file":"js/_rvm_gems_ruby-3_0_2_gems_decidim-core-0_27_3_app_packs_src_decidim_map_icon_js-_rvm_gems_rub-dcdfdc.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AC/BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpPA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA","sources":["webpack://decidim-sb-app/../../../.rvm/gems/ruby-3.0.2/gems/decidim-core-0.27.3/app/packs/src/decidim/map/icon.js","webpack://decidim-sb-app/../../../.rvm/gems/ruby-3.0.2/gems/decidim-core-0.27.3/app/packs/src/decidim/map/svg-icon.js","webpack://decidim-sb-app/../../../.rvm/gems/ruby-3.0.2/gems/decidim-core-0.27.3/app/packs/src/decidim/vendor/leaflet-tilelayer-here.js"],"sourcesContent":["import * as L from \"leaflet\";\nimport { SVGIcon } from \"src/decidim/map/svg-icon\";\n\nL.DivIcon.SVGIcon = SVGIcon;\nL.DivIcon.SVGIcon.DecidimIcon = L.DivIcon.SVGIcon.extend({\n  options: {\n    fillColor: \"#ef604d\",\n    fillOpacity: 1,\n    opacity: 0\n  },\n  _createPathDescription: function() {\n    return \"M14 1.17a11.685 11.685 0 0 0-11.685 11.685c0 11.25 10.23 20.61 10.665 21a1.5 1.5 0 0 0 2.025 0c0.435-.435 10.665-9.81 10.665-21A11.685 11.685 0 0 0 14 1.17Zm0 17.415A5.085 5.085 0 1 1 19.085 13.5 5.085 5.085 0 0 1 14 18.585Z\";\n  },\n  _createCircle: function() {\n    return \"\"\n  },\n  // Improved version of the _createSVG, essentially the same as in later\n  // versions of Leaflet. It adds the `px` values after the width and height\n  // CSS making the focus borders work correctly across all browsers.\n  _createSVG: function() {\n    const path = this._createPath();\n    const circle = this._createCircle();\n    const text = this._createText();\n    const className = `${this.options.className}-svg`;\n\n    const style = `width:${this.options.iconSize.x}px; height:${this.options.iconSize.y}px;`;\n\n    const svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" class=\"${className}\" style=\"${style}\">${path}${circle}${text}</svg>`;\n\n    return svg;\n  }\n});\n","/* eslint prefer-reflect: 0 */\n\n// Leaflet-SVGIcon\n// SVG icon for any marker class\n//\n// Copyright (c) 2016 University of New Hampshire - The MIT License\n// Author: Ilya Atkin <ilya.atkin@unh.edu>\n// Originally copied from https://github.com/iatkin/leaflet-svgicon\n//\n\nlet SVGIcon = L.DivIcon.extend({\n  options: {\n    \"circleText\": \"\",\n    \"className\": \"svg-icon\",\n    // defaults to [iconSize.x/2, iconSize.x/2]\n    \"circleAnchor\": null,\n    // defaults to color\n    \"circleColor\": null,\n    // defaults to opacity\n    \"circleOpacity\": null,\n    \"circleFillColor\": \"rgb(255,255,255)\",\n    // default to opacity\n    \"circleFillOpacity\": null,\n    \"circleRatio\": 0.5,\n    // defaults to weight\n    \"circleWeight\": null,\n    \"color\": \"rgb(0,102,255)\",\n    // defaults to color\n    \"fillColor\": null,\n    \"fillOpacity\": 0.4,\n    \"fontColor\": \"rgb(0, 0, 0)\",\n    \"fontOpacity\": \"1\",\n    // defaults to iconSize.x/4\n    \"fontSize\": null,\n    \"fontWeight\": \"normal\",\n    // defaults to [iconSize.x/2, iconSize.y] (point tip)\n    \"iconAnchor\": null,\n    \"iconSize\": L.point(32, 48),\n    \"opacity\": 1,\n    \"popupAnchor\": null,\n    \"shadowAngle\": 45,\n    \"shadowBlur\": 1,\n    \"shadowColor\": \"rgb(0,0,10)\",\n    \"shadowEnable\": false,\n    \"shadowLength\": 0.75,\n    \"shadowOpacity\": 0.5,\n    \"shadowTranslate\": L.point(0, 0),\n    \"weight\": 2\n  },\n  initialize: function(_options) {\n    let options = L.Util.setOptions(this, _options)\n\n    // iconSize needs to be converted to a Point object if it is not passed as one\n    options.iconSize = L.point(options.iconSize)\n\n    // in addition to setting option dependant defaults, Point-based options are converted to Point objects\n    if (options.circleAnchor) {\n      options.circleAnchor = L.point(options.circleAnchor)\n    } else {\n      options.circleAnchor = L.point(Number(options.iconSize.x) / 2, Number(options.iconSize.x) / 2)\n    }\n    if (!options.circleColor) {\n      options.circleColor = options.color\n    }\n    if (!options.circleFillOpacity) {\n      options.circleFillOpacity = options.opacity\n    }\n    if (!options.circleOpacity) {\n      options.circleOpacity = options.opacity\n    }\n    if (!options.circleWeight) {\n      options.circleWeight = options.weight\n    }\n    if (!options.fillColor) {\n      options.fillColor = options.color\n    }\n    if (!options.fontSize) {\n      options.fontSize = Number(options.iconSize.x / 4)\n    }\n    if (options.iconAnchor) {\n      options.iconAnchor = L.point(options.iconAnchor)\n    }\n    else {\n      options.iconAnchor = L.point(Number(options.iconSize.x) / 2, Number(options.iconSize.y))\n    }\n    if (options.popupAnchor) {\n      options.popupAnchor = L.point(options.popupAnchor)\n    }\n    else {\n      options.popupAnchor = L.point(0, (-0.75) * (options.iconSize.y))\n    }\n\n    options.html = this._createSVG()\n  },\n  _createCircle: function() {\n    let cx = Number(this.options.circleAnchor.x)\n    let cy = Number(this.options.circleAnchor.y)\n    let radius = this.options.iconSize.x / 2 * Number(this.options.circleRatio)\n    let fill = this.options.circleFillColor\n    let fillOpacity = this.options.circleFillOpacity\n    let stroke = this.options.circleColor\n    let strokeOpacity = this.options.circleOpacity\n    let strokeWidth = this.options.circleWeight\n    let className = `${this.options.className}-circle`\n\n    let circle = `<circle class=\"${className}\" cx=\"${cx}\" cy=\"${cy}\" r=\"${radius\n    }\" fill=\"${fill}\" fill-opacity=\"${fillOpacity\n    }\" stroke=\"${stroke}\" stroke-opacity=${strokeOpacity}\" stroke-width=\"${strokeWidth}\"/>`\n\n    return circle\n  },\n  _createPathDescription: function() {\n    let height = Number(this.options.iconSize.y)\n    let width = Number(this.options.iconSize.x)\n    let weight = Number(this.options.weight)\n    let margin = weight / 2\n\n    let startPoint = `M ${margin} ${width / 2} `\n    let leftLine = `L ${width / 2} ${height - weight} `\n    let rightLine = `L ${width - margin} ${width / 2} `\n    let arc = `A ${width / 4} ${width / 4} 0 0 0 ${margin} ${width / 2} Z`\n\n    let description = startPoint + leftLine + rightLine + arc\n\n    return description\n  },\n  _createPath: function() {\n    let pathDescription = this._createPathDescription()\n    let strokeWidth = this.options.weight\n    let stroke = this.options.color\n    let strokeOpacity = this.options.opacity\n    let fill = this.options.fillColor\n    let fillOpacity = this.options.fillOpacity\n    let className = `${this.options.className}-path`\n\n    let path = `<path class=\"${className}\" d=\"${pathDescription\n    }\" stroke-width=\"${strokeWidth}\" stroke=\"${stroke}\" stroke-opacity=\"${strokeOpacity\n    }\" fill=\"${fill}\" fill-opacity=\"${fillOpacity}\"/>`\n\n    return path\n  },\n  _createShadow: function() {\n    let pathDescription = this._createPathDescription()\n    let strokeWidth = this.options.weight\n    let stroke = this.options.shadowColor\n    let fill = this.options.shadowColor\n    let className = `${this.options.className}-shadow`\n\n    let origin = `${this.options.iconSize.x / 2}px ${this.options.iconSize.y}px`\n    let rotation = this.options.shadowAngle\n    let height = this.options.shadowLength\n    let opacity = this.options.shadowOpacity\n    let blur = this.options.shadowBlur\n    let translate = `${this.options.shadowTranslate.x}px, ${this.options.shadowTranslate.y}px`\n\n    let blurFilter = `<filter id='iconShadowBlur'><feGaussianBlur in='SourceGraphic' stdDeviation='${blur}'/></filter>`\n\n    let shadow = `<path filter=\"url(#iconShadowBlur\") class=\"${className}\" d=\"${pathDescription}\" fill=\"${fill}\" stroke-width=\"${strokeWidth}\" stroke=\"${stroke}\" style=\"opacity: ${opacity}; transform-origin: ${origin}; transform: rotate(${rotation}deg) translate(${translate}) scale(1, ${height})\" />`\n\n    return blurFilter + shadow\n  },\n  _createSVG: function() {\n    let path = this._createPath()\n    let circle = this._createCircle()\n    let text = this._createText()\n    let shadow = \"\"\n    if (this.options.shadowEnable) {\n      shadow = this._createShadow()\n    }\n\n    let className = `${this.options.className}-svg`\n    let width = this.options.iconSize.x\n    let height = this.options.iconSize.y\n\n    if (this.options.shadowEnable) {\n      width += this.options.iconSize.y * this.options.shadowLength - (this.options.iconSize.x / 2)\n      width = Math.max(width, 32)\n      height += this.options.iconSize.y * this.options.shadowLength\n    }\n\n    let style = `width:${width}px; height:${height}`\n    let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" class=\"${className}\" style=\"${style}\">${shadow}${path}${circle}${text}</svg>`\n\n    return svg\n  },\n  _createText: function() {\n    let fontSize = `${this.options.fontSize}px`\n    let fontWeight = this.options.fontWeight\n    let lineHeight = Number(this.options.fontSize)\n\n    let coordX = this.options.circleAnchor.x\n    // 35% was found experimentally\n    let coordY = this.options.circleAnchor.y + (lineHeight * 0.35)\n    let circleText = this.options.circleText\n    let textColor = this.options.fontColor.replace(\"rgb(\", \"rgba(\").replace(\")\", `,${this.options.fontOpacity})`)\n\n    let text = `<text text-anchor=\"middle\" x=\"${coordX}\" y=\"${coordY}\" style=\"font-size: ${fontSize}; font-weight: ${fontWeight}\" fill=\"${textColor}\">${circleText}</text>`\n\n    return text\n  }\n})\n\nlet SVGMarker = L.Marker.extend({\n  options: {\n    \"iconFactory\": L.divIcon.svgIcon,\n    \"iconOptions\": {}\n  },\n  initialize: function(latlng, _options) {\n    let options = L.Util.setOptions(this, _options)\n    options.icon = options.iconFactory(options.iconOptions)\n    this._latlng = latlng\n  },\n  onAdd: function(map) {\n    L.Marker.prototype.onAdd.call(this, map)\n  },\n  setStyle: function(style) {\n    if (this._icon) {\n      //      let svg = this._icon.children[0]\n      let iconBody = this._icon.children[0].children[0]\n      let iconCircle = this._icon.children[0].children[1]\n\n      if (style.color && !style.iconOptions) {\n        let stroke = style.color.replace(\"rgb\", \"rgba\").replace(\")\", `,${this.options.icon.options.opacity})`)\n        let fill = style.color.replace(\"rgb\", \"rgba\").replace(\")\", `,${this.options.icon.options.fillOpacity})`)\n        iconBody.setAttribute(\"stroke\", stroke)\n        iconBody.setAttribute(\"fill\", fill)\n        iconCircle.setAttribute(\"stroke\", stroke)\n\n        this.options.icon.fillColor = fill\n        this.options.icon.color = stroke\n        this.options.icon.circleColor = stroke\n      }\n      if (style.opacity) {\n        this.setOpacity(style.opacity)\n      }\n      if (style.iconOptions) {\n        if (style.color) {\n          style.iconOptions.color = style.color\n        }\n        let iconOptions = L.Util.setOptions(this.options.icon, style.iconOptions)\n        this.setIcon(L.divIcon.svgIcon(iconOptions))\n      }\n    }\n  }\n});\n\nexport { SVGMarker, SVGIcon }\n\n","/* eslint-disable */\n\n// 🍂class TileLayer.HERE\n// Tile layer for HERE maps tiles.\nL.TileLayer.HERE = L.TileLayer.extend({\n\n  options: {\n    subdomains: '1234',\n    minZoom: 2,\n    maxZoom: 18,\n\n    // 🍂option scheme: String = 'normal.day'\n    // The \"map scheme\", as documented in the HERE API.\n    scheme: 'normal.day',\n\n    // 🍂option resource: String = 'maptile'\n    // The \"map resource\", as documented in the HERE API.\n    resource: 'maptile',\n\n    // 🍂option mapId: String = 'newest'\n    // Version of the map tiles to be used, or a hash of an unique map\n    mapId: 'newest',\n\n    // 🍂option format: String = 'png8'\n    // Image format to be used (`png8`, `png`, or `jpg`)\n    format: 'png8',\n\n    // 🍂option appId: String = ''\n    // Required option. The `app_id` provided as part of the HERE credentials\n    appId: '',\n\n    // 🍂option appCode: String = ''\n    // Required option. The `app_code` provided as part of the HERE credentials\n    appCode: '',\n\n    // 🍂option useCIT: boolean = false\n    // Whether to use the CIT when loading the here-maptiles\n    useCIT: false,\n\n    // 🍂option useHTTPS: boolean = true\n    // Whether to use HTTPS when loading the here-maptiles\n    useHTTPS: true,\n\n    // 🍂option language: String = ''\n    // The language of the descriptions on the maps that are loaded\n    language: '',\n\n    // 🍂option language: String = ''\n    // The second language of the descriptions on the maps that are loaded\n    language2: '',\n  },\n\n\n  initialize: function initialize(options) {\n    options = L.setOptions(this, options);\n\n    // Decide if this scheme uses the aerial servers or the basemap servers\n    var schemeStart = options.scheme.split('.')[0];\n    options.tileResolution = 256;\n\n    // {Base URL}{Path}/{resource (tile type)}/{map id}/{scheme}/{zoom}/{column}/{row}/{size}/{format}\n    // ?apiKey={YOUR_API_KEY}\n    // &{param}={value}\n\n    var params = [\n      'apiKey=' + encodeURIComponent(options.apiKey)\n    ];\n    // Fallback to old app_id,app_code if no apiKey passed\n    if(!options.apiKey) {\n      params = [\n        'app_id=' + encodeURIComponent(options.appId),\n        'app_code=' + encodeURIComponent(options.appCode),\n      ];\n    }\n    if(options.language) {\n      params.push('lg=' + encodeURIComponent(options.language));\n    }\n    if(options.language2) {\n      params.push('lg2=' + encodeURIComponent(options.language2));\n    }\n    var urlQuery = '?' + params.join('&');\n\n    var path = '/maptile/2.1/{resource}/{mapId}/{scheme}/{z}/{x}/{y}/{tileResolution}/{format}' + urlQuery;\n    var attributionPath = '/maptile/2.1/copyright/{mapId}?apiKey={apiKey}';\n\n    var baseUrl = 'maps.ls.hereapi.com';\n\n    // Old style with apiId/apiCode for compatibility\n    if(!options.apiKey) {\n      // make sure the CIT-url can be used\n      baseUrl = 'maps' + (options.useCIT ? '.cit' : '') + '.api.here.com';\n      attributionPath = '/maptile/2.1/copyright/{mapId}?app_id={appId}&app_code={appCode}';\n    }\n\n    var tileServer = 'base.' + baseUrl;\n    if (schemeStart == 'satellite' || schemeStart == 'terrain' || schemeStart == 'hybrid') {\n      tileServer = 'aerial.' + baseUrl;\n    }\n    if (options.scheme.indexOf('.traffic.') !== -1) {\n      tileServer = 'traffic' + baseUrl;\n    }\n\n    var protocol = 'http' + (options.useHTTPS ? 's' : '');\n    var tileUrl = protocol + '://{s}.' + tileServer + path;\n\n    this._attributionUrl = L.Util.template(protocol + '://1.' + tileServer + attributionPath, this.options);\n\n    L.TileLayer.prototype.initialize.call(this, tileUrl, options);\n\n    this._attributionText = '';\n\n  },\n\n  onAdd: function onAdd(map) {\n    L.TileLayer.prototype.onAdd.call(this, map);\n\n    if (!this._attributionBBoxes) {\n      this._fetchAttributionBBoxes();\n    }\n  },\n\n  onRemove: function onRemove(map) {\n    //\n    // Remove the attribution text, and clear the cached text so it will be recalculated\n    // if/when we are shown again.\n    //\n    this._map.attributionControl.removeAttribution(this._attributionText);\n    this._attributionText = '';\n\n    this._map.off('moveend zoomend resetview', this._findCopyrightBBox, this);\n\n    //\n    // Call the prototype last, once we've tidied up our own changes\n    //\n    L.TileLayer.prototype.onRemove.call(this, map);\n  },\n\n  _fetchAttributionBBoxes: function _onMapMove() {\n    var xmlhttp = new XMLHttpRequest();\n    xmlhttp.onreadystatechange = L.bind(function(){\n      if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\n        this._parseAttributionBBoxes(JSON.parse(xmlhttp.responseText));\n      }\n    }, this);\n    xmlhttp.open(\"GET\", this._attributionUrl, true);\n    xmlhttp.send();\n  },\n\n  _parseAttributionBBoxes: function _parseAttributionBBoxes(json) {\n    if (!this._map) { return; }\n    var providers = json[this.options.scheme.split('.')[0]] || json.normal;\n    for (var i=0; i<providers.length; i++) {\n      if (providers[i].boxes) {\n        for (var j=0; j<providers[i].boxes.length; j++) {\n          var box = providers[i].boxes[j];\n          providers[i].boxes[j] = L.latLngBounds( [ [box[0], box[1]], [box[2], box[3]] ]);\n        }\n      }\n    }\n\n    this._map.on('moveend zoomend resetview', this._findCopyrightBBox, this);\n\n    this._attributionProviders = providers;\n\n    this._findCopyrightBBox();\n  },\n\n  _findCopyrightBBox: function _findCopyrightBBox() {\n    if (!this._map) { return; }\n    var providers = this._attributionProviders;\n    var visibleProviders = [];\n    var zoom = this._map.getZoom();\n    var visibleBounds = this._map.getBounds();\n\n    for (var i=0; i<providers.length; i++) {\n      if (providers[i].minLevel <= zoom && providers[i].maxLevel >= zoom) {\n\n        if (!providers[i].boxes) {\n          // No boxes = attribution always visible\n          visibleProviders.push(providers[i]);\n        } else {\n          for (var j=0; j<providers[i].boxes.length; j++) {\n            var box = providers[i].boxes[j];\n            if (visibleBounds.intersects(box)) {\n              visibleProviders.push(providers[i]);\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    var attributions = ['<a href=\"https://legal.here.com/en-gb/terms\" target=\"_blank\" rel=\"noopener noreferrer\">HERE maps</a>'];\n    for (var i=0; i<visibleProviders.length; i++) {\n      var provider = visibleProviders[i];\n      attributions.push('<abbr title=\"' + provider.alt + '\">' + provider.label + '</abbr>');\n    }\n\n    var attributionText = '© ' + attributions.join(', ') + '. ';\n\n    if (attributionText !== this._attributionText) {\n      this._map.attributionControl.removeAttribution(this._attributionText);\n      this._map.attributionControl.addAttribution(this._attributionText = attributionText);\n    }\n  },\n\n});\n\n\nL.tileLayer.here = function(opts){\n  return new L.TileLayer.HERE(opts);\n}\n"],"names":[],"sourceRoot":""}