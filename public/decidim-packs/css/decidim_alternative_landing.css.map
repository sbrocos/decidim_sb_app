{"version":3,"file":"css/decidim_alternative_landing.css","mappings":";;;AAAA;;;;;AAAA;AC2CA;AACA;ACpCA;ADuCA;AACA;ACrCA;ADwCA;AApCA;AACA;AACA;AACA;AACA;ACDA;ACmLA;AAIA;AACA;ADpLA;ACuLA;AACA;AACA;ADrLA;ADLA;AAEA;AACA;ACMA;ACyLA;AACA;ADvLA;ADNA;AACA;AACA;ACQA;ADiBA;AAKA;AACA;ACnBA;ADsBA;AACA;ACpBA;ADwBA;AACA;ACtBA;AD0BA;AACA;AACA;AACA;ACxBA;AD2BA;AACA;ACzBA;AD6BA;AACA;AACA;AC3BA;AD8BA;AACA;AACA;AC5BA;AD+BA;AACA;AC7BA;ADgCA;AACA;AC9BA;;ADmCA;AACA;AChCA;AC4HA;AAIA;AACA;AD7HA;ACgIA;AACA;AACA;AD9HA;AD9CA;AACA;AACA;ACgDA;ACkIA;AACA;ADhIA;AC6GA;AAIA;AACA;AD9GA;ACiHA;AACA;AACA;AD/GA;AD7DA;AACA;AACA;AC+DA;ACmHA;AACA;ADjHA;AC8FA;AAIA;AACA;AD/FA;ACkGA;AACA;AACA;ADhGA;AD5EA;AACA;AACA;AC8EA;ACoGA;AACA;ADlGA;AC+EA;AAIA;AACA;ADhFA;ACmFA;AACA;AACA;ADjFA;AD3FA;AACA;AACA;AC6FA;ACqFA;AACA;ADnFA;ACgEA;AAIA;AACA;ADjEA;ACoEA;AACA;AACA;ADlEA;AD1GA;AACA;AACA;AC4GA;ACsEA;AACA;ADpEA;;AGxIA;;AACA;AH4IA;;AGxIA;AACA;AAfA;AACA;AACA;AACA;AACA;AH2JA;AG5IA;AACA;AACA;AH8IA;;AG1IA;AACA;AACA;AH6IA;AG3IA;AACA;AA9BA;AACA;AACA;AACA;AACA;AH4KA;AG7IA;AACA;AH+IA;AIHA;ADvJA;AAeA;AH+IA;AG7IA;AACA;AH+IA;AG5IA;AACA;AH8IA;AACA;;AG1IA;AACA;AACA;AACA;AH6IA;;AMpMA;AAKA;ANmMA;AMhMA;AACA;ANkMA;AI3BA;AEjLA;AAcA;ANkMA;AMhMA;AACA;ANkMA;AACA;;AOnNA;AACA;AACA;APsNA;AOpNA;AACA;AACA;AACA;AACA;AACA;APsNA;AOpNA;AACA;AACA;APsNA;AOlNA;AACA;APoNA;AOlNA;AACA;APoNA;AIzDA;AGhLA;AA0BA;APmNA;AACA;;AQ9OA;AACA;AACA;AACA;AAEA;AACA;ARgPA;AQ7OA;AACA;AACA;AR+OA;AQ5OA;AACA;AACA;AACA;AACA;AR8OA;AQ3OA;AACA;AACA;AACA;AR6OA;AQ1OA;AACA;AACA;AACA;AR4OA;AI1FA;AI9IA;AACA;AR2OA;AQxOA;AACA;AR0OA;AQvOA;AACA;AACA;AACA;ARyOA;AACA;;ASvRA;AACA;AACA;AACA;AACA;AACA;AAEA;ATyRA;AStRA;AACA;AACA;AACA;AACA;AACA;AACA;ATwRA;AStRA;AACA;AACA;AACA;ATwRA;ASrRA;AACA;AACA;AACA;ATuRA;ASrRA;AACA;AACA;ATuRA;ASrRA;AACA;AACA;ATuRA;ASrRA;AACA;AACA;ATuRA;ASrRA;AACA;AACA;ATuRA;;AIlJA;AK/HA;AACA;ATqRA;ASlRA;AACA;AToRA;AACA","sources":["webpack://decidim-sb-app/file:///Users/sbrocos/codespace/decidimos/decidim_sb_app/node_modules/foundation-sites/scss/foundation.scss","webpack://decidim-sb-app/file:///Users/sbrocos/.rvm/gems/ruby-3.0.2/bundler/gems/decidim-module-alternative_landing-110292c2b0f3/app/packs/stylesheets/decidim/alternative_landing/content_blocks/calendar.scss","webpack://decidim-sb-app/../../../.rvm/gems/ruby-3.0.2/bundler/gems/decidim-module-alternative_landing-110292c2b0f3/app/packs/entrypoints/decidim_alternative_landing.scss","webpack://decidim-sb-app/file:///Users/sbrocos/codespace/decidimos/decidim_sb_app/node_modules/foundation-sites/scss/components/_button.scss","webpack://decidim-sb-app/file:///Users/sbrocos/codespace/decidimos/decidim_sb_app/node_modules/foundation-sites/scss/_global.scss","webpack://decidim-sb-app/file:///Users/sbrocos/.rvm/gems/ruby-3.0.2/bundler/gems/decidim-module-alternative_landing-110292c2b0f3/app/packs/stylesheets/decidim/alternative_landing/content_blocks/cover.scss","webpack://decidim-sb-app/file:///Users/sbrocos/codespace/decidimos/decidim_sb_app/node_modules/foundation-sites/scss/util/_breakpoint.scss","webpack://decidim-sb-app/file:///Users/sbrocos/.rvm/gems/ruby-3.0.2/bundler/gems/decidim-module-alternative_landing-110292c2b0f3/app/packs/stylesheets/decidim/alternative_landing/content_blocks/variables.scss","webpack://decidim-sb-app/file:///Users/sbrocos/.rvm/gems/ruby-3.0.2/bundler/gems/decidim-module-alternative_landing-110292c2b0f3/app/packs/stylesheets/decidim/alternative_landing/content_blocks/shared.scss","webpack://decidim-sb-app/file:///Users/sbrocos/.rvm/gems/ruby-3.0.2/bundler/gems/decidim-module-alternative_landing-110292c2b0f3/app/packs/stylesheets/decidim/alternative_landing/content_blocks/stack_vertical.scss","webpack://decidim-sb-app/file:///Users/sbrocos/.rvm/gems/ruby-3.0.2/bundler/gems/decidim-module-alternative_landing-110292c2b0f3/app/packs/stylesheets/decidim/alternative_landing/content_blocks/stack_horizontal.scss","webpack://decidim-sb-app/file:///Users/sbrocos/.rvm/gems/ruby-3.0.2/bundler/gems/decidim-module-alternative_landing-110292c2b0f3/app/packs/stylesheets/decidim/alternative_landing/content_blocks/tiles.scss"],"sourcesContent":["/**\n * Foundation for Sites\n * Version 6.8.1\n * https://get.foundation\n * Licensed under MIT Open Source\n */\n\n// --- Dependencies ---\n@import 'vendor/normalize';\n@import '../_vendor/sassy-lists/stylesheets/helpers/missing-dependencies';\n@import '../_vendor/sassy-lists/stylesheets/helpers/true';\n@import '../_vendor/sassy-lists/stylesheets/functions/contain';\n@import '../_vendor/sassy-lists/stylesheets/functions/purge';\n@import '../_vendor/sassy-lists/stylesheets/functions/remove';\n@import '../_vendor/sassy-lists/stylesheets/functions/replace';\n@import '../_vendor/sassy-lists/stylesheets/functions/to-list';\n\n// --- Settings ---\n// import your own `settings` here or\n// import and modify the default settings through\n// @import 'settings/settings';\n\n// --- Components ---\n// Utilities\n@import 'util/util';\n// Global styles\n@import 'global';\n@import 'forms/forms';\n@import 'typography/typography';\n\n// Grids\n@import 'grid/grid';\n@import 'xy-grid/xy-grid';\n// Generic components\n@import 'components/button';\n@import 'components/button-group';\n@import 'components/close-button';\n@import 'components/label';\n@import 'components/progress-bar';\n@import 'components/slider';\n@import 'components/switch';\n@import 'components/table';\n// Basic components\n@import 'components/badge';\n@import 'components/breadcrumbs';\n@import 'components/callout';\n@import 'components/card';\n@import 'components/dropdown';\n@import 'components/pagination';\n@import 'components/tooltip';\n\n// Containers\n@import 'components/accordion';\n@import 'components/media-object';\n@import 'components/orbit';\n@import 'components/responsive-embed';\n@import 'components/tabs';\n@import 'components/thumbnail';\n// Menu-based containers\n@import 'components/menu';\n@import 'components/menu-icon';\n@import 'components/accordion-menu';\n@import 'components/drilldown';\n@import 'components/dropdown-menu';\n\n// Layout components\n@import 'components/off-canvas';\n@import 'components/reveal';\n@import 'components/sticky';\n@import 'components/title-bar';\n@import 'components/top-bar';\n\n// Helpers\n@import 'components/float';\n@import 'components/flex';\n@import 'components/visibility';\n@import 'prototype/prototype';\n\n\n@mixin foundation-everything(\n  $flex: true,\n  $prototype: false,\n  $xy-grid: $xy-grid\n) {\n  @if $flex {\n    $global-flexbox: true !global;\n  }\n\n  @if $xy-grid {\n    $xy-grid: true !global;\n  }\n\n  // Global styles\n  @include foundation-global-styles;\n  @include foundation-forms;\n  @include foundation-typography;\n\n  // Grids\n  @if not $flex {\n    @include foundation-grid;\n  }\n  @else {\n    @if $xy-grid {\n      @include foundation-xy-grid-classes;\n    }\n    @else {\n      @include foundation-flex-grid;\n    }\n  }\n\n  // Generic components\n  @include foundation-button;\n  @include foundation-button-group;\n  @include foundation-close-button;\n  @include foundation-label;\n  @include foundation-progress-bar;\n  @include foundation-slider;\n  @include foundation-switch;\n  @include foundation-table;\n  // Basic components\n  @include foundation-badge;\n  @include foundation-breadcrumbs;\n  @include foundation-callout;\n  @include foundation-card;\n  @include foundation-dropdown;\n  @include foundation-pagination;\n  @include foundation-tooltip;\n\n  // Containers\n  @include foundation-accordion;\n  @include foundation-media-object;\n  @include foundation-orbit;\n  @include foundation-responsive-embed;\n  @include foundation-tabs;\n  @include foundation-thumbnail;\n  // Menu-based containers\n  @include foundation-menu;\n  @include foundation-menu-icon;\n  @include foundation-accordion-menu;\n  @include foundation-drilldown-menu;\n  @include foundation-dropdown-menu;\n\n  // Layout components\n  @include foundation-off-canvas;\n  @include foundation-reveal;\n  @include foundation-sticky;\n  @include foundation-title-bar;\n  @include foundation-top-bar;\n\n  // Helpers\n  @include foundation-float-classes;\n  @if $flex { @include foundation-flex-classes; }\n  @include foundation-visibility-classes;\n  @if $prototype { @include foundation-prototype-classes; }\n}\n","@import \"stylesheets/decidim/alternative_landing/content_blocks/variables\";\n@import \"foundation-sites/scss/foundation\";\n\n$debate: var(--primary) !default;\n$election: var(--warning) !default;\n$meeting: var(--success) !default;\n$participatory_process_step: var(--secondary) !default;\n$survey: var(--alert) !default;\n\n$calendar-today-color: rgb(255, 255, 128);\n\n$calendar-button-color: $dark-gray;\n\n@mixin calendar-button-style($color) {\n  @include button-style($color, $color, white);\n  border-color: transparent;\n  text-transform: uppercase;\n  font-size: 90%;\n  letter-spacing: 0.05em;\n  font-weight: 600;\n\n  &:disabled {\n    @include button-hollow;\n    color: $body-font-color;\n    border-color: $body-font-color;\n  }\n\n  &:hover {\n    filter: brightness(95%);\n    border-color: transparent;\n  }\n}\n\n@mixin calendar-filter-button-style($color) {\n  @include button-style($color, $color, white);\n  &.hollow {\n    color: $color;\n    border-color: $color;\n    @include button-hollow;\n  }\n}\n\n#calendar {\n  table {\n    margin-bottom: 0;\n  }\n\n  td {\n    border-color: $light-gray !important;\n  }\n\n  .fc-button-primary {\n    @include calendar-button-style($calendar-button-color);\n\n    &.disabled,\n    &.disabled:hover,\n    &[disabled]:hover,\n    &.disabled:focus,\n    &[disabled]:focus {\n      border-color: $calendar-button-color;\n      color: $calendar-button-color;\n    }\n\n    &.fc-button-active {\n      filter: brightness(85%);\n    }\n  }\n\n  .fc-content-skeleton td {\n    background-color: white;\n  }\n\n  .fc-day {\n    &-number {\n      display: block;\n      float: none;\n      text-align: center;\n    }\n\n    &-top {\n      background-color: $calendar-button-color;\n    }\n  }\n\n  .fc-event-container a:focus {\n    color: white;\n    filter: brightness(85%);\n  }\n\n  .fc-scroller {\n    overflow-x: hidden !important;\n    overflow-y: hidden !important;\n  }\n\n  .fc-title {\n    margin-left: 5px;\n  }\n\n  .fc-today {\n    background-color: $calendar-today-color;\n  }\n}\n\n.calendar-filters {\n  .button.cal-filter {\n    margin-right: 0.5rem;\n  }\n  .debate {\n    @include calendar-filter-button-style($debate);\n  }\n  .election {\n    @include calendar-filter-button-style($election);\n  }\n  .meeting {\n    @include calendar-filter-button-style($meeting);\n  }\n  .participatory_process_step {\n    @include calendar-filter-button-style($participatory_process_step);\n  }\n  .survey {\n    @include calendar-filter-button-style($survey);\n  }\n}\n","/**\n * Foundation for Sites\n * Version 6.8.1\n * https://get.foundation\n * Licensed under MIT Open Source\n */\n#calendar table {\n  margin-bottom: 0;\n}\n#calendar td {\n  border-color: #e6e6e6 !important;\n}\n#calendar .fc-button-primary {\n  border-color: transparent;\n  text-transform: uppercase;\n  font-size: 90%;\n  letter-spacing: 0.05em;\n  font-weight: 600;\n}\n#calendar .fc-button-primary, #calendar .fc-button-primary.disabled, #calendar .fc-button-primary[disabled], #calendar .fc-button-primary.disabled:hover, #calendar .fc-button-primary[disabled]:hover, #calendar .fc-button-primary.disabled:focus, #calendar .fc-button-primary[disabled]:focus {\n  background-color: #8a8a8a;\n  color: white;\n}\n#calendar .fc-button-primary:hover, #calendar .fc-button-primary:focus {\n  background-color: #8a8a8a;\n  color: white;\n}\n#calendar .fc-button-primary:disabled {\n  color: #0a0a0a;\n  border-color: #0a0a0a;\n}\n#calendar .fc-button-primary:disabled, #calendar .fc-button-primary:disabled:hover, #calendar .fc-button-primary:disabled:focus, #calendar .fc-button-primary:disabled.disabled, #calendar .fc-button-primary:disabled.disabled:hover, #calendar .fc-button-primary:disabled.disabled:focus, #calendar .fc-button-primary:disabled[disabled], #calendar .fc-button-primary:disabled[disabled]:hover, #calendar .fc-button-primary:disabled[disabled]:focus {\n  background-color: transparent;\n}\n#calendar .fc-button-primary:hover {\n  filter: brightness(95%);\n  border-color: transparent;\n}\n#calendar .fc-button-primary.disabled, #calendar .fc-button-primary.disabled:hover, #calendar .fc-button-primary[disabled]:hover, #calendar .fc-button-primary.disabled:focus, #calendar .fc-button-primary[disabled]:focus {\n  border-color: #8a8a8a;\n  color: #8a8a8a;\n}\n#calendar .fc-button-primary.fc-button-active {\n  filter: brightness(85%);\n}\n#calendar .fc-content-skeleton td {\n  background-color: white;\n}\n#calendar .fc-day-number {\n  display: block;\n  float: none;\n  text-align: center;\n}\n#calendar .fc-day-top {\n  background-color: #8a8a8a;\n}\n#calendar .fc-event-container a:focus {\n  color: white;\n  filter: brightness(85%);\n}\n#calendar .fc-scroller {\n  overflow-x: hidden !important;\n  overflow-y: hidden !important;\n}\n#calendar .fc-title {\n  margin-left: 5px;\n}\n#calendar .fc-today {\n  background-color: rgb(255, 255, 128);\n}\n\n.calendar-filters .button.cal-filter {\n  margin-right: 0.5rem;\n}\n.calendar-filters .debate, .calendar-filters .debate.disabled, .calendar-filters .debate[disabled], .calendar-filters .debate.disabled:hover, .calendar-filters .debate[disabled]:hover, .calendar-filters .debate.disabled:focus, .calendar-filters .debate[disabled]:focus {\n  background-color: var(--primary);\n  color: white;\n}\n.calendar-filters .debate:hover, .calendar-filters .debate:focus {\n  background-color: var(--primary);\n  color: white;\n}\n.calendar-filters .debate.hollow {\n  color: var(--primary);\n  border-color: var(--primary);\n}\n.calendar-filters .debate.hollow, .calendar-filters .debate.hollow:hover, .calendar-filters .debate.hollow:focus, .calendar-filters .debate.hollow.disabled, .calendar-filters .debate.hollow.disabled:hover, .calendar-filters .debate.hollow.disabled:focus, .calendar-filters .debate.hollow[disabled], .calendar-filters .debate.hollow[disabled]:hover, .calendar-filters .debate.hollow[disabled]:focus {\n  background-color: transparent;\n}\n.calendar-filters .election, .calendar-filters .election.disabled, .calendar-filters .election[disabled], .calendar-filters .election.disabled:hover, .calendar-filters .election[disabled]:hover, .calendar-filters .election.disabled:focus, .calendar-filters .election[disabled]:focus {\n  background-color: var(--warning);\n  color: white;\n}\n.calendar-filters .election:hover, .calendar-filters .election:focus {\n  background-color: var(--warning);\n  color: white;\n}\n.calendar-filters .election.hollow {\n  color: var(--warning);\n  border-color: var(--warning);\n}\n.calendar-filters .election.hollow, .calendar-filters .election.hollow:hover, .calendar-filters .election.hollow:focus, .calendar-filters .election.hollow.disabled, .calendar-filters .election.hollow.disabled:hover, .calendar-filters .election.hollow.disabled:focus, .calendar-filters .election.hollow[disabled], .calendar-filters .election.hollow[disabled]:hover, .calendar-filters .election.hollow[disabled]:focus {\n  background-color: transparent;\n}\n.calendar-filters .meeting, .calendar-filters .meeting.disabled, .calendar-filters .meeting[disabled], .calendar-filters .meeting.disabled:hover, .calendar-filters .meeting[disabled]:hover, .calendar-filters .meeting.disabled:focus, .calendar-filters .meeting[disabled]:focus {\n  background-color: var(--success);\n  color: white;\n}\n.calendar-filters .meeting:hover, .calendar-filters .meeting:focus {\n  background-color: var(--success);\n  color: white;\n}\n.calendar-filters .meeting.hollow {\n  color: var(--success);\n  border-color: var(--success);\n}\n.calendar-filters .meeting.hollow, .calendar-filters .meeting.hollow:hover, .calendar-filters .meeting.hollow:focus, .calendar-filters .meeting.hollow.disabled, .calendar-filters .meeting.hollow.disabled:hover, .calendar-filters .meeting.hollow.disabled:focus, .calendar-filters .meeting.hollow[disabled], .calendar-filters .meeting.hollow[disabled]:hover, .calendar-filters .meeting.hollow[disabled]:focus {\n  background-color: transparent;\n}\n.calendar-filters .participatory_process_step, .calendar-filters .participatory_process_step.disabled, .calendar-filters .participatory_process_step[disabled], .calendar-filters .participatory_process_step.disabled:hover, .calendar-filters .participatory_process_step[disabled]:hover, .calendar-filters .participatory_process_step.disabled:focus, .calendar-filters .participatory_process_step[disabled]:focus {\n  background-color: var(--secondary);\n  color: white;\n}\n.calendar-filters .participatory_process_step:hover, .calendar-filters .participatory_process_step:focus {\n  background-color: var(--secondary);\n  color: white;\n}\n.calendar-filters .participatory_process_step.hollow {\n  color: var(--secondary);\n  border-color: var(--secondary);\n}\n.calendar-filters .participatory_process_step.hollow, .calendar-filters .participatory_process_step.hollow:hover, .calendar-filters .participatory_process_step.hollow:focus, .calendar-filters .participatory_process_step.hollow.disabled, .calendar-filters .participatory_process_step.hollow.disabled:hover, .calendar-filters .participatory_process_step.hollow.disabled:focus, .calendar-filters .participatory_process_step.hollow[disabled], .calendar-filters .participatory_process_step.hollow[disabled]:hover, .calendar-filters .participatory_process_step.hollow[disabled]:focus {\n  background-color: transparent;\n}\n.calendar-filters .survey, .calendar-filters .survey.disabled, .calendar-filters .survey[disabled], .calendar-filters .survey.disabled:hover, .calendar-filters .survey[disabled]:hover, .calendar-filters .survey.disabled:focus, .calendar-filters .survey[disabled]:focus {\n  background-color: var(--alert);\n  color: white;\n}\n.calendar-filters .survey:hover, .calendar-filters .survey:focus {\n  background-color: var(--alert);\n  color: white;\n}\n.calendar-filters .survey.hollow {\n  color: var(--alert);\n  border-color: var(--alert);\n}\n.calendar-filters .survey.hollow, .calendar-filters .survey.hollow:hover, .calendar-filters .survey.hollow:focus, .calendar-filters .survey.hollow.disabled, .calendar-filters .survey.hollow.disabled:hover, .calendar-filters .survey.hollow.disabled:focus, .calendar-filters .survey.hollow[disabled], .calendar-filters .survey.hollow[disabled]:hover, .calendar-filters .survey.hollow[disabled]:focus {\n  background-color: transparent;\n}\n\n.cover-full .cover-body,\n.cover-half .cover-body {\n  font-size: 1.25em;\n}\n\n.cover-full {\n  color: var(--color_text);\n  background-size: cover;\n  background-position: center;\n  background-blend-mode: luminosity;\n  background-color: var(--color_background_image);\n  min-height: 100vh;\n}\n.cover-full .cover-text {\n  background-color: rgba(var(--color_background_text-rgb), 0.7);\n  padding: 2em;\n}\n\n.cover-half {\n  display: grid;\n  grid-template-columns: 40em 1fr;\n}\n.cover-half .cover-image {\n  grid-column: 2;\n  background-size: cover;\n  background-position: center;\n  background-blend-mode: luminosity;\n  background-color: var(--color_background_image);\n  min-height: 100vh;\n}\n.cover-half .cover-text {\n  padding: 3em;\n}\n@media print, screen and (max-width: 63.99875em) {\n  .cover-half {\n    display: block;\n  }\n  .cover-half .cover-image {\n    min-height: 50vh;\n  }\n  .cover-half .cover-text {\n    padding: 1em;\n  }\n}\n\n.navbar.transparent {\n  background-color: rgba(var(--color_navbar-rgb), 0.3);\n  position: relative;\n  margin-bottom: -50px;\n}\n\n.alternative-landing.cover-full, .alternative-landing.cover-half, .alternative-landing.tiles, .alternative-landing.stack-horizontal, .alternative-landing.stack-vertical {\n  padding: 5em;\n}\n.alternative-landing .heading1 {\n  font-size: 4em;\n}\n@media print, screen and (max-width: 63.99875em) {\n  .alternative-landing {\n    padding: 1em;\n  }\n  .alternative-landing .heading1 {\n    font-size: 3em;\n  }\n}\n\n.stack-vertical .stack {\n  display: flex;\n  gap: 1em;\n}\n.stack-vertical .stack .stack-item {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1em;\n  gap: 1em;\n}\n.stack-vertical .stack .stack-item img {\n  min-height: 15em;\n  object-fit: cover;\n}\n.stack-vertical .stack .stack-tags {\n  margin: 0;\n}\n.stack-vertical .stack .stack-tags li {\n  margin: 0;\n}\n@media print, screen and (max-width: 63.99875em) {\n  .stack-vertical .stack {\n    flex-direction: column;\n  }\n}\n\n.stack-horizontal .stack-item {\n  border: 1px solid black;\n  padding: 1em;\n  margin: 1em auto;\n  display: flex;\n  gap: 1em;\n}\n.stack-horizontal .stack-image img {\n  object-fit: cover;\n  min-height: 10em;\n}\n.stack-horizontal .stack-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 100%;\n}\n.stack-horizontal .stack-image {\n  padding: 0;\n  min-width: 25%;\n  width: 25%;\n}\n.stack-horizontal .stack-link .button {\n  max-width: 15em;\n  margin: 0;\n  float: right;\n}\n@media print, screen and (max-width: 63.99875em) {\n  .stack-horizontal .stack-item {\n    flex-direction: column;\n  }\n  .stack-horizontal .stack-image {\n    width: 100%;\n  }\n  .stack-horizontal .stack-link .button {\n    margin: 1em auto 0;\n    max-width: none;\n    float: none;\n  }\n}\n\n.tiles-4 .tiles {\n  display: grid;\n  grid-template-columns: 30% 30% 40%;\n  grid-template-rows: repeat(2, 1fr);\n  min-height: 100vh;\n  color: white;\n  gap: 1em;\n}\n.tiles-4 .tile {\n  background-size: cover;\n  background-position: center;\n  background-color: rgba(255, 255, 255, 0.5);\n  background-blend-mode: screen;\n  min-height: 4em;\n  padding: 1em;\n}\n.tiles-4 .tile .tile-body {\n  max-width: 20em;\n  background: var(--primary);\n  padding: 1em;\n}\n.tiles-4 .tile-heading {\n  grid-column: span 3;\n  background: var(--secondary);\n  margin: 0;\n}\n.tiles-4 .tile-1 {\n  grid-column: span 2;\n  grid-row: 2;\n}\n.tiles-4 .tile-2 {\n  grid-column: 3;\n  grid-row: 2/span 2;\n}\n.tiles-4 .tile-3 {\n  grid-column: 1;\n  grid-row: 3;\n}\n.tiles-4 .tile-4 {\n  grid-column: 2;\n  grid-row: 3;\n}\n\n@media print, screen and (max-width: 63.99875em) {\n  .tiles {\n    display: block;\n  }\n  .tile {\n    min-height: 50vh;\n  }\n}","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group button\n////\n\n/// Font family for button elements.\n/// @type Font\n$button-font-family: inherit !default;\n\n/// Font weight for button elements.\n/// Ignored if null (default)\n/// @type Font-Weight\n$button-font-weight: null !default;\n\n/// Padding inside buttons.\n/// @type List\n$button-padding: 0.85em 1em !default;\n\n/// Margin around buttons.\n/// @type List\n$button-margin: 0 0 $global-margin 0 !default;\n\n/// Default fill for buttons. Can either be `solid` or `hollow`.\n/// @type Keyword\n$button-fill: solid !default;\n\n/// Default background color for buttons.\n/// @type Color\n$button-background: $primary-color !default;\n\n/// Background color on hover for buttons.\n/// @type Color\n$button-background-hover: scale-color($button-background, $lightness: -15%) !default;\n\n/// Font color for buttons.\n/// @type List\n$button-color: $white !default;\n\n/// Alternative font color for buttons.\n/// @type List\n$button-color-alt: $black !default;\n\n/// Border radius for buttons, defaulted to global-radius.\n/// @type Number\n$button-radius: $global-radius !default;\n\n/// Border for buttons, transparent by default\n/// @type List\n$button-border: 1px solid transparent !default;\n\n/// Border width for hollow outline buttons\n/// @type Number\n$button-hollow-border-width: 1px !default;\n\n/// Sizes for buttons.\n/// @type Map\n$button-sizes: (\n  tiny: 0.6rem,\n  small: 0.75rem,\n  default: 0.9rem,\n  large: 1.25rem,\n) !default;\n\n/// Coloring classes. A map of classes to output in your CSS, like `.secondary`, `.success`, and so on.\n/// @type Map\n$button-palette: $foundation-palette !default;\n\n/// opacity for a disabled button.\n/// @type List\n$button-opacity-disabled: 0.25 !default;\n\n/// Background color lightness on hover for buttons.\n/// @type Number\n$button-background-hover-lightness: -20% !default;\n\n/// Color lightness on hover for hollow buttons.\n/// @type Number\n$button-hollow-hover-lightness: -50% !default;\n\n// Internal: flip from margin-right to margin-left for defaults\n@if $global-text-direction == 'rtl' {\n  $button-margin: 0 0 $global-margin $global-margin !default;\n}\n\n/// transitions for buttons.\n/// @type List\n$button-transition: background-color 0.25s ease-out, color 0.25s ease-out !default;\n\n/// Additional responsive classes for .expanded\n/// @type Boolean\n$button-responsive-expanded: false !default;\n\n// TODO: Document button-base() mixin\n@mixin button-base {\n  @include disable-mouse-outline;\n  display: inline-block;\n  vertical-align: middle;\n  margin: $button-margin;\n\n  @if (type-of($button-padding) == 'map') {\n    @each $size, $padding in $button-padding {\n      @include breakpoint($size) {\n        padding: $padding;\n      }\n    }\n  }\n  @else {\n    padding: $button-padding;\n  }\n\n  border: $button-border;\n  border-radius: $button-radius;\n  transition: $button-transition;\n  font-family: $button-font-family;\n  font-size: map-get($button-sizes, default);\n  font-weight: $button-font-weight;\n  -webkit-appearance: none; // sass-lint:disable-line no-vendor-prefixes\n  line-height: 1;\n  text-align: center;\n  cursor: pointer;\n}\n\n/// Expands a button to make it full-width.\n/// @param {Boolean} $expand [true] - Set to `true` to enable the expand behavior. Set to `false` to reverse this behavior.\n@mixin button-expand($expand: true) {\n  @if $expand {\n    display: block;\n    width: 100%;\n    margin-right: 0;\n    margin-left: 0;\n  }\n  @else {\n    display: inline-block;\n    width: auto;\n    margin: $button-margin;\n  }\n}\n\n/// Sets the base styles of a hollow or clear button filling according to `$fill`.\n/// See mixin `button-fill-style` for the filling styles.\n/// @param {Keyword} $fill [$button-fill] - Type of filling between `hollow` and `clear`. `solid` has no effects.\n@mixin button-fill(\n  $fill: $button-fill\n) {\n  @if $fill == hollow {\n    @include button-hollow;\n  }\n  @else if $fill == clear {\n    @include button-clear;\n  }\n}\n\n/// Sets the visual styles of a solid/hollow/clear button filling according to `$fill`.\n/// See mixins `button-style`, `button-hollow-style` and `button-clear-style` for effects of visual styling parameters.\n/// @param {Keyword} $fill [$button-fill] - Type of filling between `hollow` and `clear`.\n/// @param {Color} $background [$button-background] - -\n/// @param {Color} $background-hover [$button-background-hover] - -\n/// @param {Color} $color [$button-color] - -\n@mixin button-fill-style(\n  $fill: $button-fill,\n  $background: $button-background,\n  $background-hover: $button-background-hover,\n  $color: $button-color\n) {\n  @if $fill == solid {\n    @include button-style($background, $background-hover, $color);\n  }\n  @else if $fill == hollow {\n    @include button-hollow-style($background);\n  }\n  @else if $fill == clear {\n    @include button-clear-style($background);\n  }\n}\n\n/// Sets the visual style of a button.\n/// @param {Color} $background [$button-background] - Background color of the button.\n/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.\n/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.\n@mixin button-style(\n  $background: $button-background,\n  $background-hover: $button-background-hover,\n  $color: $button-color,\n  $background-hover-lightness: $button-background-hover-lightness\n) {\n  @if $color == auto {\n    $color: color-pick-contrast($background, ($button-color, $button-color-alt));\n  }\n\n  @if $background-hover == auto {\n    $background-hover: scale-color($background, $lightness: $background-hover-lightness);\n  }\n\n  // Default and disabled states\n  &,\n  &.disabled, &[disabled],\n  &.disabled:hover, &[disabled]:hover,\n  &.disabled:focus, &[disabled]:focus {\n    background-color: $background;\n    color: $color;\n  }\n\n  &:hover, &:focus {\n    background-color: $background-hover;\n    color: $color;\n  }\n}\n\n/// Sets the base styles of a hollow button.\n/// See mixin `button-hollow-style` for the filling styles.\n@mixin button-hollow {\n  &, &.disabled, &[disabled] {\n    &, &:hover, &:focus {\n      background-color: transparent;\n    }\n  }\n}\n\n/// Sets the visual style of a hollow button.\n/// @param {Color} $color [$button-background] - Text and border color of the button.\n/// @param {Color} $hover-lightness [$button-hollow-hover-lightness] - Color lightness on hover.\n/// @param {Color} $border-width [$button-hollow-border-width] - Border width of the button.\n@mixin button-hollow-style(\n  $color: $button-background,\n  $hover-lightness: $button-hollow-hover-lightness,\n  $border-width: $button-hollow-border-width\n) {\n  $color-hover: scale-color($color, $lightness: $hover-lightness);\n\n  // Default and disabled states\n  &,\n  &.disabled, &[disabled],\n  &.disabled:hover, &[disabled]:hover,\n  &.disabled:focus, &[disabled]:focus {\n    border: $border-width solid $color;\n    color: $color;\n  }\n\n  &:hover, &:focus {\n    border-color: $color-hover;\n    color: $color-hover;\n  }\n}\n\n/// Sets the base styles of a clear button.\n/// See mixin `button-clear-style` for the filling styles.\n@mixin button-clear {\n  &, &.disabled, &[disabled] {\n    &, &:hover, &:focus {\n      border-color: transparent;\n      background-color: transparent;\n    }\n  }\n}\n\n/// Sets the visual style of a clear button.\n/// @param {Color} $color [$button-background] - Text color of the button.\n/// @param {Color} $hover-lightness [$button-hollow-hover-lightness] - Color lightness on hover.\n@mixin button-clear-style(\n  $color: $button-background,\n  $hover-lightness: $button-hollow-hover-lightness\n) {\n  $color-hover: scale-color($color, $lightness: $hover-lightness);\n\n  // Default and disabled states\n  &,\n  &.disabled, &[disabled],\n  &.disabled:hover, &[disabled]:hover,\n  &.disabled:focus, &[disabled]:focus {\n    color: $color;\n  }\n\n  &:hover, &:focus {\n    color: $color-hover;\n  }\n}\n\n/// Adds disabled styles to a button by fading the element and reseting the cursor.\n/// @param {Number} $opacity [$button-opacity-disabled] - Opacity of the disabled button.\n@mixin button-disabled(\n  $opacity: $button-opacity-disabled\n) {\n  opacity: $button-opacity-disabled;\n  cursor: not-allowed;\n}\n\n/// Adds a dropdown arrow to a button.\n/// @param {Number} $size [0.4em] - Size of the arrow. We recommend using an `em` value so the triangle scales when used inside different sizes of buttons.\n/// @param {Color} $color [white] - Color of the arrow.\n/// @param {Number} $offset [$button-padding] - Distance between the arrow and the text of the button. Defaults to whatever the right padding of a button is.\n@mixin button-dropdown(\n  $size: 0.4em,\n  $color: $white,\n  $offset: get-side($button-padding, right)\n) {\n  &::after {\n    @include css-triangle($size, $color, down);\n    position: relative;\n    top: 0.4em; // Aligns the arrow with the text of the button\n\n    display: inline-block;\n    float: #{$global-right};\n    margin-#{$global-left}: $offset;\n  }\n}\n\n/// Adds all styles for a button. For more granular control over styles, use the individual button mixins.\n/// @param {Boolean} $expand [false] - Set to `true` to make the button full-width.\n/// @param {Color} $background [$button-background] - Background color of the button.\n/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.\n/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.\n/// @param {Keyword} $style [solid] - Set to `hollow` to create a hollow button. The color defined in `$background` will be used as the primary color of the button.\n@mixin button(\n  $expand: false,\n  $background: $button-background,\n  $background-hover: $button-background-hover,\n  $color: $button-color,\n  $style: $button-fill\n) {\n  @include button-base;\n  @include button-fill($style);\n  @include button-fill-style($style, $background, $background-hover, $color);\n\n  @if $expand {\n    @include button-expand;\n  }\n}\n\n@mixin foundation-button {\n  .button {\n    @include button($style: none);\n\n    // Sizes\n    @each $size, $value in map-remove($button-sizes, default) {\n      &.#{$size} {\n        font-size: $value;\n      }\n    }\n\n    &.expanded { @include button-expand; }\n\n    @if $button-responsive-expanded {\n      @each $size in $breakpoint-classes {\n        @include breakpoint(#{$size} only) {\n          &.#{$size}-only-expanded {\n            @include button-expand;\n          }\n        }\n        @if $size != $-zf-zero-breakpoint {\n          @include breakpoint(#{$size} down) {\n            &.#{$size}-down-expanded {\n              @include button-expand;\n            }\n          }\n\n          @include breakpoint(#{$size}) {\n            &.#{$size}-expanded {\n              @include button-expand;\n            }\n          }\n        }\n      }\n    }\n\n    // Solid, hollow & clear styles\n    @each $filling in (solid hollow clear) {\n      $selector: if($button-fill == $filling, null, '.#{$filling}');\n\n      &#{$selector} {\n        @include button-fill($filling);\n        @include button-fill-style($filling);\n\n        @each $name, $color in $button-palette {\n          &.#{$name} {\n            @include button-fill-style($filling, $color, auto, auto);\n          }\n        }\n      }\n    }\n\n    // Disabled state\n    &.disabled, &[disabled] {\n      @include button-disabled;\n    }\n\n    // Dropdown arrow\n    &.dropdown {\n      @include button-dropdown;\n\n      @if $button-fill == hollow {\n        &::after {\n          border-top-color: $button-background;\n        }\n      }\n\n      &.hollow, &.clear {\n        &::after {\n          border-top-color: $button-background;\n        }\n\n        @each $name, $color in $button-palette {\n          &.#{$name} {\n            &::after {\n              border-top-color: $color;\n            }\n          }\n        }\n      }\n    }\n\n    // Button with dropdown arrow only\n    &.arrow-only::after {\n      top: -0.1em;\n      float: none;\n      margin-#{$global-left}: 0;\n    }\n  }\n\n  a.button { // sass-lint:disable-line no-qualifying-elements\n    &:hover,\n    &:focus {\n      text-decoration: none;\n    }\n  }\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n// sass-lint:disable no-color-literals, no-qualifying-elements\n\n////\n/// @group global\n////\n\n@import 'util/util';\n\n/// Font size attribute applied to `<html>` and `<body>`. We use 100% by default so the value is inherited from the user's browser settings.\n/// @type Number\n$global-font-size: 100% !default;\n\n/// Global width of your site. Used by the grid to determine row width.\n/// @type Number\n$global-width: rem-calc(1200) !default;\n\n/// Default line height for all type. `$global-lineheight` is 24px while `$global-font-size` is 16px\n/// @type Number\n$global-lineheight: 1.5 !default;\n\n/// Colors used for buttons, callouts, links, etc. There must always be a color called `primary`.\n/// @type Map\n$foundation-palette: (\n  \"primary\": #1779ba,\n  \"secondary\": #767676,\n  \"success\": #3adb76,\n  \"warning\": #ffae00,\n  \"alert\": #cc4b37,\n) !default;\n\n/// Color used for light gray UI items.\n/// @type Color\n$light-gray: #e6e6e6 !default;\n\n/// Color used for medium gray UI items.\n/// @type Color\n$medium-gray: #cacaca !default;\n\n/// Color used for dark gray UI items.\n/// @type Color\n$dark-gray: #8a8a8a !default;\n\n/// Color used for black ui items.\n/// @type Color\n$black: #0a0a0a !default;\n\n/// Color used for white ui items.\n/// @type Color\n$white: #fefefe !default;\n\n/// Background color of the body.\n/// @type Color\n$body-background: $white !default;\n\n/// Text color of the body.\n/// @type Color\n$body-font-color: $black !default;\n\n/// Font stack of the body.\n/// @type List\n$body-font-family: 'Helvetica Neue', Helvetica, Roboto, Arial, sans-serif !default;\n\n/// Set to `true` to enable safe padding on the body for non-rectangular devices (i.e. phones with notches)\n/// @type Boolean\n$body-safe-padding: false !default;\n\n/// Set to `true` to enable antialiased type, using the `-webkit-font-smoothing` and `-moz-osx-font-smoothing` CSS properties.\n/// @type Boolean\n$body-antialiased: true !default;\n\n/// Global value used for margin on components.\n/// @type Number\n$global-margin: 1rem !default;\n\n/// Global value used for padding on components.\n/// @type Number\n$global-padding: 1rem !default;\n\n/// Global value used for positioning on components.\n/// @type Number\n$global-position: 1rem !default;\n\n/// Global font weight used for normal type.\n/// @type Keyword | Number\n$global-weight-normal: normal !default;\n\n/// Global font weight used for bold type.\n/// @type Keyword | Number\n$global-weight-bold: bold !default;\n\n/// Global value used for all elements that have a border radius.\n/// @type Number\n$global-radius: 0 !default;\n\n/// Global value used for all menu styles. Can be overwritten at individual menu component level.\n/// @type Number\n$global-menu-padding: 0.7rem 1rem !default;\n\n/// Global value used for all menu styles. Nested margin for submenu.\n$global-menu-nested-margin: 1rem !default;\n\n/// Sets the text direction of the CSS. Can be either `ltr` or `rtl`.\n/// @type Keyword\n$global-text-direction: ltr !default;\n\n/// Enables flexbox for components that support it.\n/// @type Boolean\n$global-flexbox: true !default;\n\n/// Enabled responsive breakpoints for prototypes if applicable\n/// @type Boolean\n$global-prototype-breakpoints: false !default;\n\n/// Button cursor's value, `auto` by default\n/// @type Keyword\n$global-button-cursor: auto !default;\n\n@if not map-has-key($foundation-palette, primary) {\n  @error 'In $foundation-palette, you must have a color named \"primary\".';\n}\n\n// Internal variables used for text direction\n$global-left: if($global-text-direction == rtl, right, left);\n$global-right: if($global-text-direction == rtl, left, right);\n\n// Internal variable that contains the flex justifying options\n$-zf-flex-justify: -zf-flex-justify($global-text-direction);\n\n/// Global tolerance for color pick contrast.\n/// @type Number\n$global-color-pick-contrast-tolerance: 0 !default;\n\n// Internal variables used for colors\n@include add-foundation-colors;\n\n@mixin foundation-global-styles {\n  @include foundation-normalize;\n\n  // These styles are applied to a <meta> tag, which is read by the Foundation JavaScript\n  .foundation-mq {\n    font-family: '#{-zf-bp-serialize($breakpoints)}';\n  }\n\n  html {\n    box-sizing: border-box;\n    font-size: $global-font-size;\n  }\n\n  // Set box-sizing globally to handle padding and border widths\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  // Default body styles\n  body {\n    margin: 0;\n    padding: 0;\n\n    @if ($body-safe-padding) {\n      // using environment variables to account for non-rectangular displays e.g. phones with notches\n      padding-top: env(safe-area-inset-top);\n      padding-right: env(safe-area-inset-right);\n      padding-bottom: env(safe-area-inset-bottom);\n      padding-left: env(safe-area-inset-left);\n    }\n\n    background: $body-background;\n\n    font-family: $body-font-family;\n    font-weight: $global-weight-normal;\n    line-height: $global-lineheight;\n    color: $body-font-color;\n\n    @if ($body-antialiased) {\n      -webkit-font-smoothing: antialiased; // sass-lint:disable-line no-vendor-prefixes\n      -moz-osx-font-smoothing: grayscale; // sass-lint:disable-line no-vendor-prefixes\n    }\n  }\n\n  img {\n    // Get rid of gap under images by making them display: inline-block; by default\n    display: inline-block;\n    vertical-align: middle;\n\n    // Grid defaults to get images and embeds to work properly\n    max-width: 100%;\n    height: auto;\n    -ms-interpolation-mode: bicubic;\n  }\n\n  // Make sure textarea takes on height automatically\n  textarea {\n    height: auto;\n    min-height: 50px;\n    border-radius: $global-radius;\n  }\n\n  // Make select elements are 100% width by default\n  select {\n    box-sizing: border-box;\n    width: 100%;\n    border-radius: $global-radius;\n  }\n\n  // Styles Google Maps and MapQuest embeds properly\n  // sass-lint:disable-line no-ids\n  .map_canvas,\n  .mqa-display {\n    img,\n    embed,\n    object {\n      max-width: none !important;\n    }\n  }\n\n  // Reset <button> styles created by most browsers\n  button {\n    @include disable-mouse-outline;\n    padding: 0;\n    appearance: none;\n    border: 0;\n    border-radius: $global-radius;\n    background: transparent;\n    line-height: 1;\n    cursor: $global-button-cursor;\n  }\n\n  // Prevent text overflow on pre\n  pre {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n  }\n\n  // Make reset inherit font-family instead of settings sans-serif\n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit;\n  }\n\n  // Internal classes to show/hide elements in JavaScript\n  .is-visible {\n    display: block !important;\n  }\n\n  .is-hidden {\n    display: none !important;\n  }\n}\n","@import \"stylesheets/decidim/alternative_landing/content_blocks/variables\";\n\n@mixin cover-background-image($color) {\n  background-size: cover;\n  background-position: center;\n  background-blend-mode: luminosity;\n  background-color: $color;\n  min-height: 100vh;\n}\n\n.cover-full,\n.cover-half {\n  .cover-body {\n    font-size: 1.25em;\n  }\n}\n\n.cover-full {\n  color: var(--color_text);\n\n  @include cover-background-image(var(--color_background_image));\n\n  .cover-text {\n    background-color: rgba(var(--color_background_text-rgb), 0.7);\n    padding: $gap * 2;\n  }\n}\n\n.cover-half {\n  display: grid;\n  grid-template-columns: 40em 1fr;\n\n  .cover-image {\n    grid-column: 2;\n\n    @include cover-background-image(var(--color_background_image));\n  }\n\n  .cover-text {\n    padding: $gap * 3;\n  }\n\n  @include breakpoint(medium down) {\n    display: block;\n\n    .cover-image {\n      min-height: 50vh;\n    }\n\n    .cover-text {\n      padding: $gap;\n    }\n  }\n}\n\n.navbar.transparent {\n  background-color: rgba(var(--color_navbar-rgb), 0.3);\n  position: relative;\n  margin-bottom: -50px;\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n/// Patch to fix issue #12080\n$-zf-size: null;\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  \"small\": 0,\n  \"medium\": 640px,\n  \"large\": 1024px,\n  \"xlarge\": 1200px,\n  \"xxlarge\": 1440px,\n) !default;\n\n/// A list of named HiDPI breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries for resolutions.\n/// Values must represent the device pixels / web pixels ration and be unitless or in DPPX.\n/// @type Map\n$breakpoints-hidpi: (\n  \"hidpi-1\": 1,\n  \"hidpi-1-5\": 1.5,\n  \"hidpi-2\": 2,\n  \"retina\": 2,\n  \"hidpi-3\": 3\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'The first key in the $breakpoints map must have a value of \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Web standard Pixels per inch. (1ddpx / $std-web-dpi) = 1dpi\n  // See https://www.w3.org/TR/css-values-3/#absolute-lengths\n  $std-web-dpi: 96;\n\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value of the following breakpoint\n  $bp-next: null;\n  // Value for max-width media queries\n  $bp-min: null;\n  // Value for min-width media queries\n  $bp-max: null;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // If named, name of the breakpoint\n  $name: null;\n  // If the breakpoint is a HiDPI breakpoint\n  $hidpi: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n\n  // If a breakpoint name is given, get its value from the $breakpoints/$breakpoints-hidpi map.\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      $name: $bp;\n      $bp: map-get($breakpoints, $name);\n      $bp-next: -zf-map-next($breakpoints, $name);\n    }\n    @else if map-has-key($breakpoints-hidpi, $bp) {\n      $name: $bp;\n      $bp: map-get($breakpoints-hidpi, $name);\n      $bp-next: -zf-map-next-number($breakpoints-hidpi, $bp);\n      $hidpi: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your `$breakpoints` or `$breakpoints-hidpi` setting.';\n    }\n  }\n\n  @if not $name and $dir == 'only' {\n    @warn 'breakpoint(): Only named media queries can have an `only` range.';\n    @return null;\n  }\n\n  // Only 'only' and 'up' have a min limit.\n  @if $dir == 'only' or $dir == 'up' {\n    $bp-min: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));\n  }\n  // Only 'only' and 'down' have a max limit.\n  @if $dir == 'only' or $dir == 'down' {\n    // If the breakpoint is a value, use it as max limit.\n    @if not $name {\n      $bp-max: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));\n    }\n    // If the breakpoint is named, the max limit is the following breakpoint - 1px.\n    @else if $bp-next {\n      // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).\n      // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.\n      // See https://github.com/foundation/foundation-sites/issues/11313\n      $bp-max: if($hidpi, $bp-next - divide(1, $std-web-dpi), -zf-bp-to-em($bp-next) - 0.00125);\n    }\n  }\n\n  // Generate the media query string from min and max limits.\n  @if $hidpi {\n    // Generate values in DPI instead of DPPX for an IE9-11/Opera mini compatibility.\n    // See https://caniuse.com/#feat=css-media-resolution\n    $bp-min-dpi: if($bp-min, $bp-min * $std-web-dpi * 1dpi, $bp-min);\n    $bp-max-dpi: if($bp-max, $bp-max * $std-web-dpi * 1dpi, $bp-max);\n    @return zf-str-join(\n      -zf-bp-join($bp-min, $bp-max, '-webkit-min-device-pixel-ratio', '-webkit-max-device-pixel-ratio'),\n      -zf-bp-join($bp-min-dpi, $bp-max-dpi, 'min-resolution', 'max-resolution'),\n      ', ');\n  }\n  @else {\n    @return -zf-bp-join($bp-min, $bp-max);\n  }\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` and `$breakpoints-hidpi` maps, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// If multiple values are passed, the mixin will generate a media query for each of them as described above.\n/// Since the content is duplicated for each breakpoint, this mixin should only be used with properties that\n/// change across breakpoints.\n///\n/// @param {Keyword|Number} $values... - Breakpoint name or px/rem/em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($values...) {\n  @for $i from 1 through length($values) {\n    $value: nth($values, $i);\n    $str: breakpoint($value);\n    $bp: index($-zf-breakpoints-keys, nth($value, 1));\n    $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n    // Direction of media query (up, down, or only)\n    $dir: if(length($value) > 1, nth($value, 2), up);\n\n    $old-zf-size: null;\n\n    // Make breakpoint size available as a variable\n    @if global-variable-exists(-zf-size) {\n      $old-zf-size: $-zf-size;\n    }\n    $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n    // If $str is still an empty string, no media query is needed\n    @if $str == '' {\n      @content;\n    }\n\n    // Otherwise, wrap the content in a media query\n    @else {\n      // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n      // generate print if the breakpoint affects the print-breakpoint (or smaller).\n      // This means the current condition only needs to be extended so 'down' always generates print.\n      @if $bp != null and ($bp <= $pbp or $dir == down) {\n        @media print, screen and #{$str} {\n          @content;\n        }\n      }\n      @else {\n        @media screen and #{$str} {\n          @content;\n        }\n      }\n    }\n\n    $-zf-size: $old-zf-size !global;\n  }\n}\n\n/// Converts the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Find the next number in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $number - Number to use as a starting point.\n///\n/// @returns {Mixed} The number following `$number`, if `$number` was found. If `$number` was not found, or `$number` was the biggest number in the map, returns `null`.\n@function -zf-map-next-number($map, $number) {\n\n  $next-number: null;\n\n  @each $k, $v in $map {\n    @if type-of($v) == 'number' and $v > $number and ($next-number == null or $v < $next-number) {\n      $next-number: $v;\n    }\n  }\n\n  @return $next-number;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found-key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found-key: true;\n    }\n    @if not $found-key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoint - a named or non-named breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n/// Return the best breakpoint to use according to the calling context. It returns in order:\n/// 1. the given `$value` argument if it is not null.\n/// 2. the global breakpoint context `$-zf-size` if it is not null (like if called inside then `breakpoint()` mixin)\n/// 3. the given `$default` argument.\n/// @access private\n///\n/// @param {Keyword} $value [null] - Breakpoint to use in priority if non-null.\n/// @param {Keyword} $default [null] - Breakpoint to use by default if no other value can be used.\n///\n/// @return {Keyword} The resolved breakpoint.\n@function -zf-current-breakpoint($value: null, $default: null) {\n  @if ($value != null) {\n    @return $value;\n  }\n  @else if (variable-exists(-zf-size) and type-of($-zf-size) != 'number') and $-zf-size != null {\n    @return $-zf-size;\n  }\n  @else {\n    @return $default;\n  }\n}\n\n/// Return media query string from the given min and/or max limits.\n/// If a limit is equal to `null` or `0`, it is ignored.\n/// @access private\n///\n/// @param {Number} $min [0] - Min media query limit.\n/// @param {Number} $max [0] - Max media query limit.\n/// @param {String} $min-name ['min-width'] - Name of the min media query limit.\n/// @param {String} $delimiter ['max-width'] - Name of the max media query limit.\n///\n/// @returns {String} Media Query string.\n@function -zf-bp-join(\n  $min: 0,\n  $max: 0,\n  $min-name: 'min-width',\n  $max-name: 'max-width'\n) {\n  @return zf-str-join(\n    if($min and $min > 0, '(#{$min-name}: #{$min})', null),\n    if($max and $max > 0, '(#{$max-name}: #{$max})', null),\n    ' and ');\n}\n\n$small-up: '';\n$small-only: '';\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n$medium-up: '';\n$medium-only: '';\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n$large-up: '';\n$large-only: '';\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n$xlarge-up: '';\n$xlarge-only: '';\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n$xxlarge-up: '';\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n","@import \"foundation-sites/scss/util/util\";\n\n$navbar-transparent-color: rgba(0, 0, 0, 0.3);\n$alternative-color-1: var(--primary);\n$alternative-color-2: var(--secondary);\n$alternative-color-2-transparent: rgba(var(--secondary-rgb), 0.7);\n$alternative-color-3: var(--warning);\n$alternative-color-4: var(--alert);\n$alternative-color-5: var(--highlight);\n\n$gap: 1em;\n","@import \"stylesheets/decidim/alternative_landing/content_blocks/variables\";\n\n.alternative-landing {\n  &.cover-full,\n  &.cover-half,\n  &.tiles,\n  &.stack-horizontal,\n  &.stack-vertical {\n    padding: 5em;\n  }\n\n  .heading1 {\n    font-size: 4em;\n  }\n\n  @include breakpoint(medium down) {\n    padding: $gap;\n\n    .heading1 {\n      font-size: 3em;\n    }\n  }\n}\n","@import \"stylesheets/decidim/alternative_landing/content_blocks/variables\";\n\n.stack-vertical {\n  .stack {\n    display: flex;\n    gap: $gap;\n\n    .stack-item {\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      padding: $gap;\n      gap: $gap;\n\n      img {\n        min-height: 15em;\n        object-fit: cover;\n      }\n    }\n\n    .stack-tags {\n      margin: 0;\n\n      li {\n        margin: 0;\n      }\n    }\n\n    @include breakpoint(medium down) {\n      flex-direction: column;\n    }\n  }\n}\n","@import \"stylesheets/decidim/alternative_landing/content_blocks/variables\";\n\n.stack-horizontal {\n  .stack-item {\n    border: 1px solid black;\n    padding: $gap;\n    margin: $gap auto;\n\n    display: flex;\n    gap: $gap;\n  }\n\n  .stack-image img {\n    object-fit: cover;\n    min-height: 10em;\n  }\n\n  .stack-body {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    width: 100%;\n  }\n\n  .stack-image {\n    padding: 0;\n    min-width: 25%;\n    width: 25%;\n  }\n\n  .stack-link .button {\n    max-width: 15em;\n    margin: 0;\n    float: right;\n  }\n\n  @include breakpoint(medium down) {\n    .stack-item {\n      flex-direction: column;\n    }\n\n    .stack-image {\n      width: 100%;\n    }\n\n    .stack-link .button {\n      margin: $gap auto 0;\n      max-width: none;\n      float: none;\n    }\n  }\n}\n","@import \"stylesheets/decidim/alternative_landing/content_blocks/variables\";\n\n.tiles-4 {\n  .tiles {\n    display: grid;\n    grid-template-columns: 30% 30% 40%;\n    grid-template-rows: repeat(2, 1fr);\n    min-height: 100vh;\n    color: white;\n\n    gap: $gap;\n  }\n\n  .tile {\n    background-size: cover;\n    background-position: center;\n    background-color: rgba(255, 255, 255, 0.5);\n    background-blend-mode: screen;\n    min-height: 4em;\n    padding: $gap;\n\n    .tile-body {\n      max-width: 20em;\n      background: $alternative-color-1;\n      padding: $gap;\n    }\n\n    &-heading {\n      grid-column: span 3;\n      background: $alternative-color-2;\n      margin: 0;\n    }\n    &-1 {\n      grid-column: span 2;\n      grid-row: 2;\n    }\n    &-2 {\n      grid-column: 3;\n      grid-row: 2 / span 2;\n    }\n    &-3 {\n      grid-column: 1;\n      grid-row: 3;\n    }\n    &-4 {\n      grid-column: 2;\n      grid-row: 3;\n    }\n  }\n}\n\n@include breakpoint(medium down) {\n  .tiles {\n    display: block;\n  }\n\n  .tile {\n    min-height: 50vh;\n  }\n}\n"],"names":[],"sourceRoot":""}